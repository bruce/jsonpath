grammar JSONPathGrammar

  rule path
    root selectors:child+ {
      def to_proc
        lambda do |object|
          selectors.elements.inject([object]) do |reduce, selector|
            selector.descend(*reduce)
          end
        end
      end
    }
  end

  rule root
    '$'
  end
  
  rule wildcard
    '*'
  end
  
  rule subscript
    '[' term ']'
  end
  
  rule term
    'x'
  end
  
  rule child
    '.' word {
      def descend(*objects)
        objects.map do |obj|
          obj[word.text_value]
        end
      end
    }
    /
    '.' '[' '\'' phrase:(!'\'' . )+ '\'' ']' {
      def descend(*objects)
        objects.map do |obj|
          obj[phrase.text_value]
        end
      end
    }
    /
    '.' wildcard {
      def descend(*objects)
        objects.inject([]) do |results, obj|
          values = case obj
          when Hash
            obj.values
          when Array
            obj
          end
          results.push(*values)
        end
      end
    }
  end
  
  rule word
    [a-zA-Z0-9]+
  end

end